System is "a web hosting that deploys itself".

MeanTimeBetweenFailures is "time that System spends in continuous
up time between one failure and the next failure.
MTBF is a measure of System reliability via continuous operation
and therefore the MTBF target should be set at the highest achievable number.
Users will not be notified of failures or down time".

MeanTimeToRecovery is "time that System spends in unscheduled down
time until recovery as a result of failure.
MTTR is a measure of System reliability via service recovery and therefore
the MTTR target should be set at the lowest achievable number".

MainPage is "a main thindeck page for (logged-in) User-s. @todo #142
I assumed there will be a main page. We should
define what functional blocks will this page contain, e.g., my repositories,
my profile, my balance, etc.".

:UC1 is specified.
:UC1 is a must.
UC1 where User (a user) goes through repository life cycle:
    1. The user reads MainPage(a mainPage);
    2. The system lists Repository(a repoList) "of the current user";
    3. The user configures virtual machine using the repo;
    4. The user registers repository;
    5. The system runs of Deployment(a deployment);
    6. The user reads deployment logs of the repo;
    7. The user reads usage stats of the repo;
    8. The user compensates usage of the repo;
    9. The user terminates the repo.
UC1/UX must "be in English only".
UC1/WEBDESIGN must "be 'responsive', see
http://en.wikipedia.org/wiki/Responsive_web_design . Since all thindeck
site pages will look good on every device, we won't need a separate
mobile version of the site".
UC1/STATELESS must "all user repositories must be 100% stateless.
We should inform users that we will be constantly changing the number
of running containers. We may terminate any container at any moment.
This means that the software inside the container (repository) should
NOT keep any data persistent. They should use other services for
persistence, like Amazon DynamoDB, etc".

User is "a person who uses or wants to use hosting and is identified
by the system (logged in)".

User includes:
    repo-s? as Repository,
    URN as "a unique identifier of itself, for example urn:github:526301",
    authTokens as "a list of auth tokens to each auth provider the
    user connected to, e.g., Google, Facebook, etc.",
    balance as "amount of money available, can be stored as
    integer number of cents".

Anonymous is "a person who is not identified in the system (not logged in).
He can actually have a User account in our System, but we can't tell
it until he logs in".

FrontPage is "a front page of Thindeck for Anonymous which contains all
the information about pricing, 'how it works', etc.".

:UC9.1 is specified.
:UC9.1 is a should.
UC9.1 where Anonymous (a anonymous) explores thindeck:
    1. The anonymous reads FrontPage(a frontPage);
    2. The anonymous "reads the stats page containing our runtime stats,
    similar to https://status.github.com/";
    3. The anonymous "reads our terms page including all the legal wordings".

:UC9.2 is specified.
:UC9.2 is a must.
UC9.2 where Anonymous (a anonymous) signs up:
    1. The anonymous "initiates sign in via one of OAuth providers from
    this list: Google Plus, Facebook, Github, or Twitter.";
    2. The system "requests permission from the OAuth provider
    chosen by the anonymous";
    3. The system creates User(a user);
    4. The system "adds $5 to the user.balance";
    5. The anonymous logs in.
UC9.2/2 when "an OAuth provider denied access":
    1. Fail since "Not authorized by chosen OAuth provider".

:UC9.3 is specified.
:UC9.3 is a must.
UC9.3 where Anonymous (a anonymous) logs in using User(a user):
    1. The system "from now on treats the anonymous as a User".

:UC11 is specified.
:UC11 is a must.
UC11 where User (a user) logs out:
    1. The system "from now on treats the user as anonymous and
    displays a public page".

Repository is "a local copy of files and folders being pulled every
5 minutes from some remote source".
Repository needs:
    name as "a unique name of the repo in user's account",
    deployment-? as Deployment,
    dockerFile as DockerFile,
    manifest as Manifest,
    remoteRepoProperties as RemoteRepoProperties.

RemoteRepoProperties is "an abstract type representing connection properties
    depending on the type of a remote repository".

GitProperties is RemoteRepoProperties "a remote git (e.g., github) repository".
GitProperties includes:
    uri as "a non-ambiguous descriptor of a repo,
    for example ssh://git@github:yegor256/thindeck.git",
    key-? as "a private SSH key,
    see http://en.wikipedia.org/wiki/Public-key_cryptography".

SvnProperties is RemoteRepoProperties "a remote subversion repository".
SvnProperties includes:
    uri as "a non-ambiguous descriptor of a repo,
    for example ssh://git@github:yegor256/thindeck.git",
    userName-? as "credentials used to read files from the repository",
    password-? as "credentials used to read files from the repository".

FtpProperties is RemoteRepoProperties "a remote FTP folder".
FtpProperties includes:
    uri as "a URL containing credentials valid to connect to FTP server,
    for example ftp://user:password@ftpserver/url-path".

DropboxProperties is RemoteRepoProperties "a Dropbox shared folder".
DropboxProperties includes: apiKey as "Dropbox specific connection information.
    @todo #172 Elaborate on the exact list of properties".

AmazonS3Properties is RemoteRepoProperties "an Amazon S3 shared folder".
AmazonS3Properties includes: apiKey as "Amazon S3 specific connection
    information. @todo #172 Elaborate on the exact list of properties".

GoogleDriveProperties is RemoteRepoProperties "a Google Drive shared folder".
GoogleDriveProperties includes: apiKey as "Google Drive specific connection
    information. @todo #172 Elaborate on the exact list of properties".

Deployment is "a summary statistics of Containers related to a Repository,
with their statuses and text logs".

Deployment includes:
    container-s as Container,
    state as "one from the list: building, running",
    hourlyUsage-s? as HourlyUsage.

Application is "a running instance of user's code built from his Repository".

Container is "a virtual operating system running user's
application build from Repository".
Container includes: app as Application.

HourlyUsage is "an atomic track record of the usage of resources".
HourlyUsage includes:
    container as Container,
    hours as "a calendar hour, for example: 2014-05-02T18",
    cpuSeconds as "how many seconds our CPU spent working with
    the container during this hour.
    Can easily be over 3600, since we may have multiple CPU's working
    with the container",
    bytesIn as "an integer number of bytes came in the container",
    bytesOut as "an integer number of bytes came out of the container".

Manifest is "a YAML configuration file stored in the repository".
Manifest includes:
    domain-s? as "a unique name that identifies a website and
        may not exceed a total length of 253 ASCII characters
        in its textual representation",
    port-s? as "a 16-bit number that identifies a network port
        for the establishment of host-to-host connectivity".

DockerFile is "a configuration for building and starting Container-s".

CreateRepoPage is "a form the user fills it to create a new repository".
CreateRepoPage contains:
    repoName as "single line text input",
    repoTypeSelector as "selector of repository type",
    repoProperties as RemoteRepoProperties "set of controls (input fields, maybe
        some kind of 'connect to' control), related to the selected repo type".

:UC2 is specified.
:UC2 is a must.
UC2 where User(a user) registers repository:
    1. The system creates CreateRepoPage(a page);
    2. The user updates the page "entering a new unique name of the repository";
    3. The system reads the page "validating repoName for uniqueness, etc.
        @todo #172 Maybe we need more detailed validation of repository name
        than just uniqueness check";
    4. The user updates the page "selecting repository type with
        repoTypeSelector";
    5. The system updates the page "inserting the controls set corresponding to
        the RemoteRepoProperties of the selected repository type";
    6. The user updates the page "filling in RemoteRepoProperties";
    7. The system creates RemoteRepoProperties(a repoProps) "and validates them
        by making a test connection";
    8. The system creates Repository(a repo);
    9. The system deploys the repo;
    10. The system updates the repo "periodically (every 5 minutes) pulling
        the changes from the remote source";
    11. The system redeploys the repo "if it was changed after last pull".
UC2/3 when "repository name is not valid":
    1. Fail since "must provide a valid name".
UC2/6 when "cannot connect to the remote source":
    1. Fail since "must provide valid connection properties".

UC2.1 where User(a user) configures virtual machine using Repository(a repo):
    1. The user creates DockerFile(a dockerFile) "in which
    he configures containers that will host his running
    Application when the repository is deployed";
    2. The user updates the repo "by putting the docker file to its root".
UC2.1/ENVIRONMENT must "be Linux, because it is the most popular OS
for running web projects in".
UC2.1/LICENSING must "be open source or free, so that we avoid license costs".
UC2.1/PRODUCTSTATE must "be mature product that is currently supported,
because we need an up-to-date product that has
already proved to be reliable and usable".
UC2.1/ISOLATION must "provide full file system and network isolation,
so that user apps from different repositories will
know nothing about each other".
UC2.1/COPYONWRITE must "be implemented, to provide an optimal resources
utilization".
UC2.1/MEMORYLIMITS must "be implemented, to avoid memory overflow by one
of user apps".
UC2.1/CPUQUOTAS must "be implemented, because we want to track and limit
CPU time usage for billing purpose".
UC2.1/EASYCHANGE must "be implemented, to avoid templating or
manual configuration, so that changes to a container's file
system could be committed into a new image and re-used
to create more containers".
UC2.1/LOGGING must "provide real-time logging, to provide up-to-date
logs to our users, who may need them to analyze
their testing app instances in real time".

:UC2.2 is specified.
:UC2.2 is a must.
UC2.2 where System(a system) redeploys using Repository(a repo):
    1. The system deletes Container(a containers)
    "terminates all Docker containers of the repo";
    2. The system deploys the repo "using updated sources".

:UC2.3 is specified.
:UC2.3 is a must.
UC2.3 where System(a system) runs of Deployment(a deployment)
    "@todo #199 - move resource utilization tracking and
    charging of a user here":
    1. The system reads Container(a deployedContainers)
    "tracking load = [the amount of CPU seconds consumed per hour]
    by each deployment.container";
    2. The system creates Container(a newContainer)
    "if one of the deployedContainers.load goes above 3600 CPU seconds";
    3. The system deletes Container(an underloadedContainer)
    "if one of deployedContainers.load goes below 1800 CPU seconds".

:UC3 is specified.
:UC3 is a must.
UC3 where System(a system) deploys using Repository (a repo):
    1. The system "starts a new Docker container with
    the latest version of the source code, configuring it
    as defined in Dockerfile";
    2. The system "applies the configuration defined
    in Manifest file to the container after it is started";
    3. The system "tracks the usage of CPU time and traffic by the container".
UC3/PERF must "each thindeck server should be able to host 4 actively working
    containers inside it, altogether handling 3M hits and 200 Gb of traffic
    per month, or 100K and 6.6 Gb per day".

:UC4 is specified.
:UC4 is a must.
UC4 where User reads deployment logs using Repository(a repo):
    1. The system lists Deployment(a deployments)
    "all deployments of the repo";
    2. The system "displays a list of deployments
    that has already been executed";
    3. The user "chooses a deployment and initiates viewing its log";
    4. The system "displays a log for the chosen deployment".

:UC5 is specified.
:UC5 is a must.
UC5 where User(a user) reads usage stats using Repository(a repo):
    1. The user "selects a time interval, like:
    last 7 days, last month, custom (from date, to date)";
    2. The system "reads HourlyUsage records corresponding
    to the repo within specified time interval";
    3. The system "shows the user a table with these columns:
    Container (id), Inbound traffic (Gb),
    Outbound traffic (Gb), CPU time (min), Cost ($).
    Each table row corresponds to a container.
    Last row contains totals by all containers.
    The values in the table are usage stats by container
    within specified time interval".

:UC6 is specified.
:UC6 is a must.
UC6 where User compensates usage of Repository:
    "The user adds funds to his account, when it goes to a negative value.
    Funds can be added through PayPal only".

:UC7 is specified.
:UC7 is a must.
UC7 where User terminates Repository:
    "The user just removes the repository and we immediately terminate
    the Docker container, close all ports, and stop routing domain names.
    This operation is irreversible".

HttpRequest is "a request that client application
(web browser, web service consumer, etc.) sends
to a web server via http protocol".

HttpResponse is "a response that a web server sends back
after it receives HttpRequest".

WebVisitor is "something sending http request to user's
Application deployed in Thindeck".

:UC10.1 is specified.
:UC10.1 is a must.
UC10.1 where WebVisitor(a visitor) utilizes Application(an app):
    1. The visitor creates HttpRequest(a request) "and sends it to the system";
    2. The system reads the request
    "to find out to which Thindeck user this request is related to";
    3. The system reads User(a user) "to check user.balance";
    4. The system notifies low balance to the user
    "if user.balance is below 5$";
    5. The system reads Deployment(a deployment)
    "to choose its container which will handle the request";
    6. The system reads Container(a container)
    "the container to handle the request. If all containers are overloaded,
    then another one is started to handle the request";
    7. The system
    "redirects the request to the app instance in a chosen container";
    8. The app reads the request
    "instance of app running in a chosen container";
    9. The app "processes the request";
    10. The app creates HttpResponse(a response);
    11. The app "replies to the visitor with the response";
    12. The visitor reads the response;
    13. The system "tracks resources usage by the app";
    14. The system creates HourlyUsage(a record)
    "and tracks utilized CPU time and traffic in this record.
    If a corresponding record already exists, then this record
    is updated instead of creating a new one";
    15. The system updates the user "decreasing user.balance
    according to the CPU time and traffic used by the app
    since previous HourlyUsage record update".
UC10.1/2 when "the request is not valid, i.e., there is no active
deployment whose Manifest would contain the binding to the requested host:port":
    1. Fail since "http error 404: none of deployed
    applications is binded to the requested host:port".
UC10.1/2 when "a number of requests exceeds the System resources":
    1. Fail since "http error 503: the System is currently unavailable".
UC10.1/3 when "user.balance is below or equals to zero":
    1. The system notifies zero balance to the user;
    2. Fail since "error page pointing out that user must top up
    his balance to utilize his application. The page should also contain
    a link to another page where the user can pay.
    If the user is Anonymous, he must log in first".
UC10.1/7 when "app is not listening to http port":
    1. Fail since "http error 404: the app is not listening to the host:port".
UC10.1/9 when "an exception appears during the app execution":
    1. Fail since "http error 404 OR some standard
    page with exception stack trace".

UC6.2 where System(a system) notifies low balance to User(a user):
    "The system sends the user an email notification one time
    when his balance is dropped below $5.
    We can also implement UI notifications".

UC6.3 where System(a system) notifies zero balance to User(a user):
    "The system sends the user an email notification one time when
    his balance is dropped below $0. We can also implement UI notifications".
